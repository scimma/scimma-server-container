#!/usr/bin/python3
from optparse import OptionParser
import os
import sys
import time
import signal      as sig
import KafkaServer as ks

## Line stdout and stderr
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', buffering=1)
sys.stderr = os.fdopen(sys.stderr.fileno(), 'w', buffering=1)

##
## Parse options.
##
ulHelp    = "comma separated list of USER:PASS pairs"
noSecHelp = "disable SSL/auth"
jdbHelp   = "turn on Java SSL debugging"
p = OptionParser(usage="Usage: %prog [options]")
p.add_option("","--keyPass",dest="keyPass",default="123456",help="keystore password")
p.add_option("","--brokerUser",dest="brokerUser",default="admin",help="broker username")
p.add_option("","--brokerPass",dest="brokerPass",default="admin-secret",help="broker password")
p.add_option("","--users",dest="userList",default="test:test-pass",help=ulHelp)
p.add_option("","--noSecurity",dest="noSec",default=False,action="store_true",help=noSecHelp)
p.add_option("","--javaDebugSSL",dest="javaDebugSSL",default=False,action="store_true",help=jdbHelp)
(o, a) = p.parse_args()

##
## Write SSL, kafka, and kafkacat configuration files.
##
config = ks.Config(o.javaDebugSSL, o.noSec, o.keyPass, o.userList, o.brokerUser, o.brokerPass)
config.write()

##
## Remove meta.properties file if it exists. This supports the case of persisting
## /tmp/kafka-logs using a volume external to the container. The meta.properties
## file contains the cluster.id which is automatically generated.
##
os.system("if [ -f /tmp/kafka-logs/meta.properties ]; then rm -f /tmp/kafka-logs/meta.properties; fi");

##
## Run kafka and zookeeper processes.
##
kCmd = ks.Command('kafka','/usr/bin/kafka-server-start',['/etc/kafka/server.properties'],'/tmp')
zCmd = ks.Command('zk','/usr/bin/zookeeper-server-start',['/etc/kafka/zookeeper.properties'],'/tmp')
cms = [kCmd, zCmd]       

zCmd.start()
while os.system("nc localhost 2181 -w 5 </dev/null >/dev/null 2>/dev/null") != 0:
     print("Waiting for zookeeper to become active...")
     time.sleep(1)
print("Started zookeeper.")
kCmd.start()
while os.system("nc localhost 9092 -w 5 </dev/null >/dev/null 2>/dev/null") != 0:
     print("Waiting for kafka to become active...")
     time.sleep(1)
print("Started kafka.")

##
## Set signal handlers.
##
Terminate = False
def handleTermSig (num, foo):
     global cms
     global Terminate
     for c in cms:
          c.JustDieAlready()
     Terminate = True

sig.signal(sig.SIGTERM, handleTermSig)
sig.signal(sig.SIGINT,  handleTermSig)
print("Signal handlers installed.")

##
## Wait for our inevitable death.
##
while not Terminate:
    time.sleep(1)

print("runServer: Exited main loop.")
for c in cms:
     print("runServer joining: %s" % c.name)
     c.join()

print("runServer: Exiting.")
exit(0)
